main {

  appName = "EhTail"
  appName = ${?APP_NAME}

  pretty = true
  pretty = ${?PRETTY}

}

akka {

  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = ${?AKKA_LOG_LEVEL}
  loglevel = "ERROR"

  actor {
    serializers {
    }
    serialization-bindings {
    }
  }

}

eventhubs {

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-factor = 2.0
      core-pool-size-max = 8
    }
    throughput = 10
    mailbox-capacity = -1
    mailbox-type = ""
  }

}

eventhubs-1 {

  snapshotInterval = 100
  snapshotInterval = ${?SNAP_SHOT_INTERVAL}

  persist = false
  persist = ${?EVENTHUB_PERSIST}

  persistFreq = 1
  persistFreq = ${?EVENTHUB_PERSIST_FREQ}

  offsetPersistenceId = "my_example_eventhubsOffset"

  connection {

    defaultOffset = "LATEST"
    defaultOffset = ${?EVENTHUB_DEFAULT_OFFSET}

    partitions = ${?EVENTHUB_PARTITION_COUNT}

    endpoint = ${?EVENTHUB_ENDPOINT}

    connStr = ${?EVENTHUB_CONNSTR}

    credentials {
        app_id = ${?EVENTHUB_CREDENTIALS_APP_ID}
        secret = ${?EVENTHUB_CREDENTIALS_SECRET}
    }

    tenant_id = ${?EVENTHUB_CREDENTIALS_TENANT_ID}
    namespace = ${?EVENTHUB_NAMESPACE}
    name = ${?EVENTHUB_NAME}

    accessPolicy = ${?EVENTHUB_ACCESS_POLICY}
    accessKey = ${?EVENTHUB_ACCESS_KEY}

    consumerGroup = "$Default"
    consumerGroup = ${?EVENTHUB_CONSUMER_GROUP}

    receiverTimeout = 120s
    receiverTimeout = ${?EVENTHUB_RECEIVER_TIMEOUT}

    receiverBatchSize = 1
    receiverBatchSize = ${?EVENTHUB_RECEIVER_BATCH_SIZE}

    readersPerPartition = 1
    readersPerPartition = ${?EVENTHUB_READERS_PER_PARTITION}
  }

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 4
      core-pool-size-factor = 2.0
      core-pool-size-max = 8
    }
    throughput = 10
    mailbox-capacity = -1
    mailbox-type = ""
  }

}
